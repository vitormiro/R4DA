[
  {
    "objectID": "basics2.html",
    "href": "basics2.html",
    "title": "3  Programação Básica - 2",
    "section": "",
    "text": "4 R como uma calculadora\nEm sua forma mais básica, R pode ser usado como uma calculadora simples. Operações como adição, subtração, divisão\n\n\n\nMatemática\nR\nResult\n\n\n\n\n\\(3 + 2\\)\n3 + 2\n5\n\n\n\\(3 - 2\\)\n3 - 2\n1\n\n\n\\(3 \\cdot2\\)\n3 * 2\n6\n\n\n\\(3 / 2\\)\n3 / 2\n1.5"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "4  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "basics1.html#realizando-cálculos-básicos",
    "href": "basics1.html#realizando-cálculos-básicos",
    "title": "2  Programação Básica - 1",
    "section": "2.1 Realizando cálculos básicos",
    "text": "2.1 Realizando cálculos básicos\nEm sua forma mais básica, R pode ser usado como uma calculadora simples. Operações básicas são executadas de forma muito simples e direta.\n\nAdição, subtração, multiplicação e divisão.\n\n\n\n\nOperação\nR\nResultado\n\n\n\n\n\\(3 + 2\\)\n3 + 2\n5\n\n\n\\(3 - 2\\)\n3 - 2\n1\n\n\n\\(3 \\cdot2\\)\n3 * 2\n6\n\n\n\\(3 / 2\\)\n3 / 2\n1.5\n\n\n\n\nPotenciação\n\n\n\n\nOperação\nR\nResultado\n\n\n\n\n\\(3^2\\)\n3 ^ 2\n9\n\n\n\\(2^{(-3)}\\)\n2 ^ (-3)\n0.125\n\n\n\\(100^{1/2}\\)\n100 ^ (1 / 2)\n10\n\n\n\\(\\sqrt{100}\\)\nsqrt(100)\n10\n\n\n\n\nLogaritmos\n\n\n\n\nOperação\nR\nResultado\n\n\n\n\n\\(\\log(e)\\)\nlog(exp(1))\n1\n\n\n\\(\\log_{10}(1000)\\)\nlog10(1000)\n3\n\n\n\\(\\log_{2}(8)\\)\nlog2(8)\n3\n\n\n\\(\\log_{4}(16)\\)\nlog(16, base = 4)\n2\n\n\n\nUsamos \\(\\ln\\) e \\(\\log\\) de forma intercambiável para representar o logaritmo natural. No R não há ln(), em vez disso, ele usa log() para o logaritmo natural.\n\nAlgumas constantes importantes\n\n\n\n\nOperação\nR\nResultado\n\n\n\n\n\\(\\pi\\)\npi\n3.1415927\n\n\n\\(e\\)\nexp(1)\n2.7182818\n\n\n\n\nTrigonometria\n\nPara aplicar funções trigonométricas no R precisamos converter graus para radianos.\n\n\n\nOperação\nR\nResultado\n\n\n\n\n\\(\\sin(\\pi / 2)\\)\nsin(pi / 2)\n1\n\n\n\\(\\cos(0)\\)\ncos(0)\n1\n\n\n\\(\\tan(\\pi / 4)\\)\ntan(pi / 4)\n1\n\n\n\nNote que o Rpossui várias funções nativas como sqrt(), exp(), log() and sin(). Para consultar a documentação sobre uma função no R, basta colocar um ponto de interrogação (?) seguido pelo nome da função e o RStudio exibirá a documentação. Por exemplo:\n\n?sqrt"
  },
  {
    "objectID": "basics1.html#atribuição-de-variáveis",
    "href": "basics1.html#atribuição-de-variáveis",
    "title": "2  Programação Básica - 1",
    "section": "2.2 Atribuição de variáveis",
    "text": "2.2 Atribuição de variáveis\nUm conceito básico em programação é chamado de variável. Um conceito um pouco diferente da forma como lidamos em matemática e estatística.\nNa programação, uma variável nos fornece um “espaço” de armazenamento nomeado.\nOu seja, uma variável nos permite armazenar informações ou dados (um valor ou um objeto), e acessar o conteúdo ao invocar o nome dado a variável.\nVejamos um exemplo.\n\n# Atribuir o valor 25 para x\nx <- 25\n\n# Imprimir o valor da variável x\nprint(x)\n\n[1] 25\n\n\nPodemos realizar operações com as variáveis.\n\n# Atribuir valor para y\ny <- 5\n\n# Imprimir o valor da soma x + y\nx + y\n\n[1] 30\n\n\nA função cat() combina vários itens em uma saída de impressão contínua.\n\ncat(\"x + y é igual a \", x+y)\n\nx + y é igual a  30"
  },
  {
    "objectID": "basics1.html#tipos-de-dados",
    "href": "basics1.html#tipos-de-dados",
    "title": "2  Programação Básica - 1",
    "section": "2.3 Tipos de dados",
    "text": "2.3 Tipos de dados\nR lida com vários tipos básicos de dados. Alguns dos tipos mais básicos são:\n\nValores numéricos (numeric)\n\nExemplos: 1, 1.0, 42.5\n\nNúmeros inteiros (integer)\n\nExemplos: 1L, 2L, 42L\n\nNúmeros complexos\n\nExemplo: 4 + 2i\n\nValores lógicos (logical): TRUE ou FALSE.\n\nApesar de não ser recomendado, podemos usar T e F.\nNA (valores ausentes) também são considerados lógicos.\n\nTexto / strings (character)\n\nExemplos: \"a\", \"Estatística\", \"Análise de Dados\"\n\n\nPodemos verificar o tipo de informação no R usando a função class ()\n\n# Exemplo\nx <- 10\nclass(x)\n\n[1] \"numeric\"\n\n\n\n# Exemplo\ny <- \"texto\"\nclass(y)\n\n[1] \"character\""
  },
  {
    "objectID": "basics1.html#estruturas-de-dados",
    "href": "basics1.html#estruturas-de-dados",
    "title": "2  Programação Básica - 1",
    "section": "2.4 Estruturas de dados",
    "text": "2.4 Estruturas de dados\nR também possui várias estruturas básicas de dados. Estas estrutura podem ser homogêneas, com todos os elementos do mesmo tipo de dados, ou heterogêneas, com os elementos de mais de um tipo de dados.\n\n\n\nDimensão\nHomogeneas\nHeterogeneas\n\n\n\n\n1\nVetores\nListas\n\n\n2\nMatrizes\nData Frame\n\n\n3 +\nArrays\n\n\n\n\n\n2.4.1 Vetores\nDe forma breve, um vetor no R é uma forma simples para armazenar dados, podendo conter dados numéricos, caracteres ou dados lógicos.\nVetores são criados com a função de combinação c( ), em que os elementos são listados entre parênteses e separados por vírgula.\n\n# Vetor\nc(2, 4, 6, 8, 10)\n\n[1]  2  4  6  8 10\n\n\nAqui o R simplesmente gerou o vetor. No próximo exemplo o vetor será armazenado na variável x.\n\nx <- c(1, 3, 5, 7, 9)\nx\n\n[1] 1 3 5 7 9\n\n\nVetores em Rdevem conter elementos do mesmo tipo. Ao tentar inserir elementos diferentes em um vetor, eles serão automaticamente convertidos em um único tipo.\n\nc(17, \"Estatística\", TRUE)\n\n[1] \"17\"          \"Estatística\" \"TRUE\"       \n\n\nFreqüentemente, precisamos criar vetores baseados em uma sequência de números. A maneira mais rápida e fácil de fazer isso é com o operador :, que cria uma sequência de números inteiros entre dois valores especificados.\n\n(y = 1:10)\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nNote que neste comando colocamos parênteses em torno da atribuição. Dessa forma o R armazenam o vetor em uma variável chamada y e imprime y no console. É a mesma operação dada a seguir.\n\ny <- c(1:10)\ny\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nUma função nativa bastante interessante para criar uma sequência é a função seq(). Essa função é definida por um valor inicial (start), um valor final (stop) e um incremento (step).\n\nseq(from = 0, to = 100, by = 5)\n\n [1]   0   5  10  15  20  25  30  35  40  45  50  55  60  65  70  75  80  85  90\n[20]  95 100\n\n\n\n\n2.4.2 Operações sobre vetores\nUma grande vantagem no uso do R é a aplicação de operações vetorizadas.\nVejamos alguns exemplos e note que as operações são aplicadas sobre cada elemento do vetor x.\n\nx <- c(1:10)\nx + 1\n\n [1]  2  3  4  5  6  7  8  9 10 11\n\n\n\n2 * x\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\n\n\nx^2\n\n [1]   1   4   9  16  25  36  49  64  81 100\n\n\n\nlog(x)\n\n [1] 0.0000000 0.6931472 1.0986123 1.3862944 1.6094379 1.7917595 1.9459101\n [8] 2.0794415 2.1972246 2.3025851\n\n\nIndexação e subconjuntos Elementos em um vetor são indexados, com índice iniciado em 1, \\(i = 1, 2, \\cdots\\).\nPodemos imprimir um elemento indicando o vetor e especificando o índice de um elemento entre colchetes [ ].\n\nx <- seq(1, 20, 3)\nx\n\n[1]  1  4  7 10 13 16 19\n\n\n\nx[1]\n\n[1] 1\n\n\nPodemos definir um subconjunto de um vetor, especificando um intervalo entre colchetes.\n\nx[1:3]\n\n[1] 1 4 7\n\n\n\n\n2.4.3 Operadores\n\n\n\nOperador\nSignificado\nExemplo\nResultado\n\n\n\n\nx < y\nx menor que y\n3 < 42\nTRUE\n\n\nx > y\nx maior que y\n3 > 42\nFALSE\n\n\nx <= y\nx menor ou igual a y\n3 <= 42\nTRUE\n\n\nx >= y\nx maior ou igual a y\n3 >= 42\nFALSE\n\n\nx == y\nxigual a y\n3 == 42\nFALSE\n\n\nx != y\nx diferente de y\n3 != 42\nTRUE\n\n\n!x\nnão x\n!(3 > 42)\nTRUE\n\n\nx | y\nx ou y\n(3 > 42) | TRUE\nTRUE\n\n\nx & y\nx e y\n(3 < 4) & ( 42 > 13)\nTRUE\n\n\n\nEm R, os operadores lógicos são vetorizados.\n\nx <- c(1:10)\nx > 5\n\n [1] FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE\n\n\n\nx == 3\n\n [1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\n\nx >= 3 & x <= 5\n\n [1] FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE\n\n\n\n\n2.4.4 Matrizes\nRtambém pode ser usado para realizar cálculos com matrizes. As matrizes podem ser criadas usando a função matrix.\n\n\n2.4.5 Cálculos com vetores e matrizes\n\n\n2.4.6 Listas\n\n\n2.4.7 Data Frames"
  }
]