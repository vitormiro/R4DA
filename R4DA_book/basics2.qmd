---
title: "Estruturas de dados"
author: "Vitor Hugo Miro"
---

`R` também possui várias estruturas básicas de dados. Estas estrutura podem ser homogêneas, com todos os elementos do mesmo tipo de dados, ou heterogêneas, com os elementos de mais de um tipo de dados.

| Dimensão | **Homogeneas** | **Heterogeneas** |
|----------|----------------|------------------|
| 1        | Vetores        | Listas           |
| 2        | Matrizes       | Data Frame       |
| 3 +      | Arrays         |                  |

## Vetores

De forma breve, um vetor no `R` é uma forma simples para armazenar dados, podendo conter dados numéricos, caracteres ou dados lógicos.

Vetores são criados com a função de combinação `c( )`, em que os elementos são listados entre parênteses e separados por vírgula.

```{r}
# Vetor
c(2, 4, 6, 8, 10)
```

Aqui o `R` simplesmente gerou o vetor. No próximo exemplo o vetor será armazenado na variável `x`.

```{r}
x <- c(1, 3, 5, 7, 9)
x
```

Vetores em `R`devem conter elementos do mesmo tipo. Ao tentar inserir elementos diferentes em um vetor, eles serão automaticamente convertidos em um único tipo.

```{r}
c(17, "Estatística", TRUE)
```

Freqüentemente, precisamos criar vetores baseados em uma sequência de números. A maneira mais rápida e fácil de fazer isso é com o operador `:`, que cria uma sequência de números inteiros entre dois valores especificados.

```{r}
(y = 1:10)
```

Note que neste comando colocamos parênteses em torno da atribuição. Dessa forma o `R` armazenam o vetor em uma variável chamada `y` e imprime `y` no console. É a mesma operação dada a seguir.

```{r}
y <- c(1:10)
y
```

Uma função nativa bastante interessante para criar uma sequência é a função `seq()`. Essa função é definida por um valor inicial (*start*), um valor final (*stop*) e um incremento (*step*).

```{r}
seq(from = 0, to = 100, by = 5)
```

### Operações sobre vetores

Uma grande vantagem no uso do `R` é a aplicação de operações vetorizadas.

Vejamos alguns exemplos e note que as operações são aplicadas sobre cada elemento do vetor `x`.

```{r}
x <- c(1:10)
x + 1
```

```{r}
2 * x
```

```{r}
x^2
```

```{r}
log(x)
```

### Indexação e subconjuntos

Elementos em um vetor são indexados, com índice iniciado em 1, $i = 1, 2, \cdots$.

Podemos imprimir um elemento indicando o vetor e especificando o índice de um elemento entre colchetes `[ ]`.

```{r}
# Gerando um vetor z com a função seq()
z <- seq(1, 20, 3)
z
```

Consultando o valor em um índice

```{r}
z[1]
```

Podemos definir um subconjunto de um vetor, especificando um intervalo entre colchetes.

```{r}
z[1:3]
```

### Operadores

| Operador | Significado              | Exemplo                | Resultado                |
|------------------|-------------------|------------------|------------------|
| `x < y`  | `x` menor que `y`        | `3 < 42`               | `r 3 < 42`               |
| `x > y`  | `x` maior que `y`        | `3 > 42`               | `r 3 > 42`               |
| `x <= y` | `x` menor ou igual a `y` | `3 <= 42`              | `r 3 <= 42`              |
| `x >= y` | `x` maior ou igual a `y` | `3 >= 42`              | `r 3 >= 42`              |
| `x == y` | `x`igual a `y`           | `3 == 42`              | `r 3 == 42`              |
| `x != y` | `x` diferente de `y`     | `3 != 42`              | `r 3 != 42`              |
| `!x`     | não `x`                  | `!(3 > 42)`            | `r !(3 > 42)`            |
| `x | y`  | `x` ou `y`               | `(3 > 42) | TRUE`      | `r (3 > 42) | TRUE`      |
| `x & y`  | `x` e `y`                | `(3 < 4) & ( 42 > 13)` | `r (3 < 4) & ( 42 > 13)` |

Em `R`, os operadores lógicos são vetorizados.

```{r}
# Gerando x
x <- c(1:10)
# Verificando elementos de x maiores do que 5
x > 5
```

```{r}
# Elementos de x iguais a 3
x == 3
```

```{r}
# Elementos de x maiores ou iguais a 3 e menores ou iguais a 5
x >= 3 & x <= 5
```

#### Algumas funções

-   Comprimento de um vetor: função `length()`

```{r}
length(x)
```

-   Soma de elementos: função `sum()`

```{r}
sum(x)
```

Apesar de não estarmos lidando diretamente com o conteúdo de estatística nesta capítulo, vamos adiantar algumas funções simples permite sumarizar os dados de um vetor.

-   Valor máximo: `max()`

```{r}
max(x)
```

-   Valor mínimo: `min()`

```{r}
min(x)
```

-   Média: `mean()`

```{r}
mean(x)
```

## Matrizes

Matrizes são tabelas retangulares de números, expressões matemáticas ou símbolos, cujo elementos são arranjados em $n$ linhas e $p$ colunas. A matrix $M$ abaixo, por exemplo, organiza cada elemento $a_{ij}$ em $n$ linhas e $p$ colunas.

$$ 
M = \begin{bmatrix}
            x_{11}       & x_{12} & x_{13} & \dots & x_{1p} \\
            x_{21}       & x_{22} & x_{23} & \dots & x_{2p} \\
            \dots \\
            x_{n1}       & x_{n2} & x_{n3} & \dots & x_{np}
    \end{bmatrix}
$$

No R, uma matriz é uma estrutura de dados homogênea (deve conter mesmo tipo de dados, e.i. numérico, caracteres, lógico) de duas dimensões.

Sua sintaxe básica é realizada por meio da função `matrix()`, tendo como argumentos os elementos que compõem a matriz.

`matrix(a, nrow = b, ncol = c)`

-   `a` representa os dados; `b` o número de linhas; `c` o número de colunas.

```{r}
# Matriz 2x2 de valores 1
matrix(1, nrow = 2, ncol = 2)
```

No exemplo acima as entradas da matriz foram preenchidas com o mesmo valor 1. Podemos "alimentar" uma matriz com valores em sequências ou vetores.

```{r}
# Criar uma sequência em x
x = 1:9
# Reformatar os valores de x para uma matriz 3X3
X = matrix(x, nrow = 3, ncol = 3)
X
```

Note que estamos usando duas variáveis diferentes: `x` minúsculo armazena um vetor e `X` maiúsculo armazena uma matriz (seguindo uma convenção usual). Podemos fazer isso porque `R`diferencia maiúsculas de minúsculas.

Por padrão, a função `matrix` reordena um vetor em colunas, mas também podemos fazer o ordenamento por linhas. O argumento `byrow` recebe um valor lógico, sendo FALSE (o padrão), e a matriz é preenchida por colunas. Caso contrário (`byrow = TRUE`), a matriz é preenchida por linhas.

```{r}
Y = matrix(x, nrow = 3, ncol = 3, byrow = TRUE)
Y
```

No próximo exemplo vamos definir vetores.

```{r}
# Definindo 3 vetores
v1 <- c(1, 5, 10)
v2 <- c(5, 9, 15)
v3 <- c(3, 8, 12)
```

Agora vamos combinar os vetores anteriores

```{r}
v <- c(v1, v2, v3)
v
```

E formar uma matriz com essa combinação.

```{r}
M <- matrix(v, nrow = 3, byrow = TRUE )
M
```

Assim como os vetores, as matrizes também são indexadas, por linhas e colunas. Como são bidimensionais, precisamos especificar linhas e colunas entre colchetes `[]` ao criar subconjuntos.

```{r}
# Elemento da linha 1 e coluna 2
M[1, 2]
```

Também podemos obter subconjunto de uma linha ou coluna inteira.

```{r}
# Linha 1
M[1, ]
```

```{r}
# Coluna 3
M[, 3]
```

### As funções `cbind` e `rbind`

#### A função `cbind`

A função `cbind` permite concatenar vetores e matrizes (e dataframes) por colunas.

```{r}
# Gerar 3 vetores
x1 <- c(10, 20, 30)
x2 <- c(5, 15, 20)
x3 <- c(20, 40, 60)

X <- cbind(x1, x2, x3)
X
```

Vamos aplicar essa função em 2 matrizes.

```{r}
M1 <- matrix(1:4, nrow = 2, ncol = 2)
M2 <- matrix (0, nrow = 2, ncol = 2)

M <- cbind(M1, M2)
M
```

#### A função `rbind`

A função `rbind` permite concatenar vetores e matrizes (e dataframes) por linhas.

```{r}
# Gerar 3 vetores
p1 <- c(1, 3, 5)
p2 <- c(2, 4, 6)
p3 <- c(3, 6, 9)

P <- rbind(p1, p2, p3)
P
```

Vamos aplicar a função `rbind` nas matrizes `M1` e `M2` geradas anteriormente.

```{r}
M <- rbind(M1, M2)
M
```

### Nomeando linhas e colunas de uma matriz

Podemos atribuir nomes para as linhas de uma matriz com a função `rownames`:

```{r}
# Vamos considerar a última matriz X gerada anteriormente
X
```

Aplicando a função `rownames`

```{r}
# Nomeando linhas e colunas
linhas <- c("linha 1", "linha 2", "linha 3")
rownames(X) <- linhas
X
```

Atribuindo nomes para as colunas com a função `colnames`:

```{r}
colunas <- c("coluna 1", "coluna 2", "coluna 3")
colnames(X) <- colunas
X
```

A função `dimnames` também permite nomear linhas e colunas por meio de uma lista de dimensão 2 com nome de linhas (1ª dimensão) e de colunas (2ª dimensão).

```{r}
# Gerando uma nova matriz
v <- c(100, 120, 150, 120, 110, 140)

M <- matrix(v, nrow = 3, byrow = TRUE,
            dimnames = list(c("linha 1", "linha 2", "linha 3"), 
                            c("coluna A", "coluna B")))
M
```

#### Algumas funções

-   Soma nas linhas: função `rowSums`

```{r}
# Somatório nas linhas
total_linha <- rowSums(M)
total_linha
```

Soma nas colunas: função `colSums`:

```{r}
# Somatório nas linhas
total_coluna <- colSums(M)
total_coluna
```

## Cálculos com vetores e matrizes

Considerando nosso estudo sobre vetores e matrizes. Vamos revisar algumas operações com matrizes e ver como podemos realizar estas operações com `R`.

Vamos definir duas matrizes $A$ e $B$:

```{r}
A <-  matrix(c(2, 0, 0, 1), nrow = 2)
A
```

```{r}
B <-  matrix(c(1:4), nrow = 2, byrow = TRUE)
B
```

### Soma

Dada duas matrizes de mesma dimensionalidade, a matriz resultante da soma / substração destas matrizes corresponde à matriz cujos elementos são a soma / subtração dos elementos das matrizes originais.

$$
\begin{bmatrix}
a & b \\
c & d \\
\end{bmatrix}
+
\begin{bmatrix}
e & f \\
g & h \\
\end{bmatrix}
=
\begin{bmatrix}
a+e & b+f \\
c+g & d+h\\
\end{bmatrix}
$$

```{r}
# Soma de duas matrizes
A+B
```

### Multiplicação por um escalar

Toda matriz, independente de sua dimensão (ordem), pode ser multiplicada por um escalar $k$, de forma que $k ∈ ℝ$. O escalar é multiplicado por cada elemento da matriz.

$$
k\cdot \begin{pmatrix} 
                      a & b\\
                      c & d 
       \end{pmatrix} = 
       \begin{pmatrix} 
                     k\cdot a & k\cdot b
                     \\ k\cdot c & k\cdot d 
       \end{pmatrix}
$$

```{r}
# Multiplicação por escalar
2*A
```

### Multiplicação elemento por elemento

$$
\begin{bmatrix}
a & b \\
c & d \\
\end{bmatrix}
*
\begin{bmatrix}
e & f \\
g & h \\
\end{bmatrix}
=
\begin{bmatrix}
a*e & b*f \\
c*g & d*h\\
\end{bmatrix}
$$

Em `R` a multiplicação elemento a elemento é realizada por meio do operador \* desde que as matrizes tenham as mesmas dimensões.

```{r}
# Multiplicação elemento a elemento
A*B
```

### Multiplicação matricial

A multiplicação entre uma matriz $(n x m)$ por uma matriz $(m x p)$ resulta em uma matriz de dimensões $(n x p)$, cujos elementos são a somatória do produto entre os elementos em linha da matriz que pré-multiplica pelos elementos em coluna da matriz que pós-multiplica.

$$
\begin{bmatrix}
a & b \\
c & d \\
\end{bmatrix}
*
\begin{bmatrix}
e & f \\
g & h \\
\end{bmatrix}
=
\begin{bmatrix}
a*e + b*g& a*f+b*h \\
c*e+d*g & c*f+d*h\\
\end{bmatrix}
$$

Em `R` a multiplicação matricial clássica é desenvolvida pelo uso do operador %\*%.

```{r}
# Produto de duas matrizes
A %*% B
```

### Transposta de uma matriz

$$
\begin{bmatrix}
a & b \\
c & d \\
\end{bmatrix}^t
=
\begin{bmatrix}
a & c \\
b & d \\
\end{bmatrix}
$$

Em `R` a transposta de uma matriz é determinada pela pela função `t()`.

```{r}
# Transposta
t(A)
```

### Determinante de uma matriz

$$
det\begin{pmatrix}
a & b\\ 
c & d
\end{pmatrix} = a\cdot d - c\cdot b
$$

$$
det(A) = \sum^n_{j = 1} (-1)^{i+j} . a_{i j} . det(A_{-i -j})
$$ Em `R` o determinante de uma matriz é calculado pela função `det()`:

```{r}
# Determinante
det(A)
```

### Inversa de uma matriz

$$
A^{-1} \cdot A = I
$$

Em `R` a inversa de uma matriz é estimada pela função `solve()`, mesma função utilizada para resolução de sistemas de equações em R.

```{r}
# Inversa
inv_A = solve(A)
inv_A
```

Conferindo:

```{r}
# prova
inv_A %*%A
```

### Traço

O traço de uma matriz é determinado pela soma dos elementos da diagonal da matriz quadrada.

$$
tr\begin{bmatrix}
a & c\\ 
b & d 
\end{bmatrix}=a+d
$$

Em `R`, a obtenção do traço passa pela extração dos elementos da diagonal da matrix, por meio da função `diag()`, e a soma destes elementos pela função `sum()`.

```{r}
# traço
sum(diag(A))
```

### Autovalores e autovetores

A decomposição própria (decomposição espectral) consiste em escrever uma matriz $A$ diagonalizável em termos de seus autovetores ($v$) e autovalores ($\lambda$). Na estatística, tal decomposição é base da técnica de componentes principais e análise fatorial.

Dada a matriz $A$, um autovalor de $A$, denotado por $\lambda$, é definido como um escalar que quando multiplicado por um vetor $x$ não-nulo (com elementos iguais a zero) satisfaz a seguinte expressão:

$$ Ax = \lambda x$$

Essa equação pode ser escrita da seguinte forma:

$$ (A - \lambda I)x = 0 $$

$x = 0$ (solução trivial) é uma solução desse sistema, mas o autovetor não deve ser um vetor nulo.

Como $A$ é $n \times n$, temos $n$ equações e $n+1$ incôgnitas (elementos de $x$ e $\lambda$. O sistema acima tem solução não trivial apenas se: $det (A - \lambda I)=0$. Assim passamos a ter $n+1$ equações.

-   Obtemos $\lambda$ resolvendo $det (A - \lambda I)=0$. Estes são candidatos a autovalores.
-   Para cada autovalor candidato obtemos o autovetor correspondente resolvendo $(A - \lambda I)x = 0$. Autovalores e autovetores são dados pelas soluções não triviais.

Em `R` a obtenção da matriz de auto-valores e auto-vetores é realizada por meio da função `eigen()`.

```{r}
# Autovalores e autovetores
eigen(A)
```

```{r}
# Autovalores
eval = eigen(A)$values
eval
```

```{r}
# Autovetores
evec = eigen(A)$vectors
evec
```

## Fatores

Em R o termo **fator** se refere a uma classe de objeto que armazenar variáveis categóricas.

Diferenciar o tipo de variável em um script `R` é importante para diversas análises estatísticas. Diferentes modelos estatísticos em `R` possuem formas diferenciadas para lidar com variáveis categóricas ou variaveis contínuas.

Um bom exemplo de variável categórica refere-se ao estado ocupacional de um indivíduo no mercado de trabalho entre "ocupado" e "desocupado".

Vamos inicialmente definir um vetor

```{r}
# Vetor com status de ocupação de 5 pessoas
ocup_vec <- c("Ocupado", "Desocupado", "Ocupado", "Desocupado", "Ocupado")
```

Note que temos um vetor de variáveis de texto.

```{r}
class(ocup_vec)
```

Vamos agora usar a função `factor()` para converter esse vetor de caracteres para um fator.

```{r}
# Converter o vetor em fator
factor_ocup_vec <- factor(ocup_vec)
```

Verificando:

```{r}
class(factor_ocup_vec)
```

```{r}
# Imprimir factor_ocup_vec
factor_ocup_vec
```

### Variáveis categóricas nominais e ordinais

Existem dois tipos de variáveis categóricas: variáveis categóricas nominais e ordinais.

Em uma variável categórica nominal não temos um ordenamento implícito; como é o caso de "homens" e "mulheres". Em contraste, as variáveis categóricas ordinais possuem uma ordem natural, como "baixo", "médio" e "alto".

Quando estamos lidando com um variável categórica ordinal, o `R` permite que sejam declarados os "níveis" desta variável. Isso é realizado com a função `levels()`.

```{r}
# Definir um vetor com variável categórica ordinal
categ <- c("alto", "baixo", "alto", "baixo", "medio", "medio", "baixo")

# Converter o vetor para um fator
factor_categ <- factor(categ)

factor_categ
```

Note que sem especificar o níveis, eles são listados em ordem alfabética.

Agora vamos especificar níveis para o fator.

```{r}
# Especificar os níveis do fator
levels(factor_categ) <- c("baixo", "medio", "alto")

# Verificando informações do fator
factor_categ
```

Podemos ter um sumário de informações do fator com a função `summary()`.

```{r}
# Gerar um sumário para factor_categ
summary(factor_categ)
```

### Fatores ordenados

Para declarar ao `R` que uma variável possui um ordenamento natural podemos usar dois argumentos adicionais na função `factor()`: `order` e `levels`.

O argumento `order` é um valor lógico, e sendo TRUE estamos indicando que o fator é ordenado. No argumento `levels` fornecemos os valores do fator na ordem correta.

```{r}
# Definir um vetor com variável categórica ordinal
conceito <- c("A", "B", "A", "C", "B", "B", "C")

# Converter o vetor para um fator e definir níveis e ordenamento
factor_conceito <- factor(conceito, 
                          order = TRUE, 
                          levels = c("C", "B", "A"))
factor_conceito
```

Podemos verificar um sumário:

```{r}
# Gerar um sumário para factor_conceito
summary(factor_conceito)
```

E podemos comparar diferentes elementos do fator.

```{r}
factor_conceito[1] > factor_conceito[2]
```

```{r}
factor_conceito[2] < factor_conceito[4]
```

## Data Frames

Vimos que as matrizes são objetos bidimensionais constituídos por linhas e colunas. Seus elementos assim como os vetores podem ser de apenas de um tipo, ou seja, matrizes no `R` podem ser constituídas unicamente por caracteres, números ou valores lógicos.

Ao contrário de uma matriz, um **Data Frame** não precisa ter o mesmo tipo de dados para cada elemento. Um Data Frame é uma lista de vetores em que cada vetor deve conter o mesmo tipo de dados, mas os diferentes vetores podem armazenar dados de diferentes tipos.

Geralmente, podemos pensar no Data Frame como uma tabela de dados em que cada linha representa uma unidade observacional e cada coluna representa uma variável.

Vamos iniciar criando vetores para armazenar informações de um conjunto de pessoas.

```{r}
# Criar vetores com caracteristicas de pessoas
nome = c("Pedro", "João", "Camila", "Lucas", "Juliana", "Marcos")
sexo = c("masculino", "masculino", "feminino", "masculino", "feminino", "masculino")
idade = c(22, 21, 18, 20, 23, 19)
altura = c(1.82, 1.78, 1.69, 1.70, 1.65, 1.68)
peso = c(79.7, 80.1, 66.5, 75.4, 58, 84.2)
renda = c(2.0, 3.0, NA, 2.2, 2.5, 3.5)
```

A partir da informação armazenada nestes vetores, podemos aplicar a função `data.frame` para criar o Data Frame, nomeado como *df*. A função `head()` exibe as primeiras 6 linhas do Data Frame.

```{r}
# Criar um data frame a partir dos vetores
df <- data.frame(nome, sexo, idade, altura, peso, renda)

# A função head() exibe as 6 primeiras linhas do Data Frame
head(df)
```

A função `str()` exibe informações sobre a estrutura do Data Frame.

```{r}
str(df)
```

Algumas outras funções fornecem informações pontuais sobre o Data Frame como as funções: - `ncol()` - número de colunas, - `nrow()` - número de linhas, - `dim()` - dimensão (nº de linhas e colunas) - `colnames()` - nome das colunas.

```{r}
# Número de colunas/ variáveis
ncol(df)
```

```{r}
# Número de linhas/ observações
nrow(df)
```

```{r}
# Dimensão do Data Frame (n. de linhas x n. de colunas)
dim(df)
```

```{r}
# Nome das colunas / variáveis
colnames(df)
```

O tipo de cada coluna individualmente pode ser verificado com a função `class`

```{r}
class(nome)
class(idade)
```

### Consultando dados no Data Frame

A manipulação de data frames é similar à manipulação de matrizes. A seleção de elementos segue a mesma lógica. Vamos selecionar a terceira linha da segunda coluna do nosso data frame `df`.

```{r}
# Consultar informação da 3ª linha e 1º coluna
df[3, 1]
```

Selecionar variáveis em um data frame, e no presente caso imprimir as informações, é bastante simples usando o comando: `df$x`. Veja que usamos o cifrão *\$* entre o nome do data frame *df* e a variável que desejamos selecionar *x*.

```{r}
# Ver informações da variável sexo
df$sexo
```

Vimos anteriormente a função `head()` que exibe as seis primeiras linhas do data frame. De forma similar, a função `tail()` permite visualizar as seis últimas linhas.

```{r}
tail(df)
```

Quando queremos selecionar linhas e colunas específicas, o método de indexação é o seguinte: `objeto[linhas,colunas]`. Este método de indexação permite total flexibilidade e controle.

```{r}
# Seleciona apenas primeira linha 
df[1, ]        
```

Observação: espaço vazio dentro do colchetes diz para o R selecionar todas as colunas. O mesmo se aplica se o espaço das linhas for deixado em branco `dados[ ,colunas]`.

```{r}
# Seleciona as 3 primeiras linhas
df[1:3, ]        
```

```{r}
# Seleciona a primeira, a segunda e quinta linhas
df[c(1,2,5), ]
```

```{r}
# Seleciona a sexta coluna (todas as linhas)
df[, 6]

```

Agora vamos visualizar o valor de uma linha específica para uma variável selecionada.

```{r}
# Ver altura na 3ª linha
df[3, 4]
```

Essa informação também poderia ser consultada ao especificar a coluna, assim:

```{r}
# Ver altura na 3ª linha
df$altura[3]
```

Podemos verificar apenas um subconjunto de variáveis (colunas) no Data Frame.

```{r}
# Vizualizar variáveis selecionadas
df[ ,c("nome", "sexo", "renda")]
```

Podemos selecionar dados usando condições lógicas.

```{r}
df$altura > 1.70
```

Mostrando todas as colunas para observações que atendem uma condição.

```{r}
df[df$altura > 1.70 , ]
```

Podemos combinar condições.

```{r}
df[df$altura <= 1.70 & df$sex == "masculino"  ,  ]
```

Também é possível fazer a seleção de informações conforme critérios usando a função `subset()`. A regra geral desta função é: `subset(dados,condição)`.

```{r}
subset(df, idade > 21)
```

### Adicionando ou excluindo colunas

Para adicionar uma coluna é utilizar a regra: `objeto$nova_coluna <- vetor`.

```{r}
# Adicionar ao df um vetor com cidades
df$cidades <- c("São Paulo", "Brasília", "Belo Horizonte", "Recife", "Curitiba", "São Paulo")
head(df)
```

Se criarmos uma coluna nova a partir de um valor, `R` irá repetir esse valor para toda a coluna.

```{r}
# Adicionar ao df uma coluna com o "pais = Brasil"
df$pais <- "Brasil"
head(df)
```

Para remover uma coluna do data frame podemos usar a regra: `objeto$coluna <- NULL`:

```{r}
# Remover coluna "pais"
df$pais <- NULL
head(df)
```

Podemos substituir valores de uma data frame com a seguinte regra básica `objeto[linha,coluna] <- valor`.

```{r}
# Remover coluna "pais"
df[3, 6] <- 2.0
head(df)
```

### Transformar uma variável categórica em fator

```{r}
df$sexo <- as.factor(df$sexo)
str(df)
```

cidades também pode ser convertido.

### Sumário estatístico

A função `summary` também se aplica para um sumário estatístico das colunas de um Data Frames.

```{r}
summary(df)
```

## Listas

Em `R` uma lista é uma estrutura de dados heterogênea unidimensional.As listas são indexadas como os vetores, com um único valor inteiro, mas cada elemento pode conter um elemento de qualquer tipo: texto, números, vetores, matrizes, data frames, ou mesmo outras listas.

A lista é uma estrutura de dados versátil podendo conter elementos de diferentes tipos e de tamanhos diferentes. A principal função para as listas é servir como um **container** para armazenar qualquer número de itens de qualquer tipo.

### Criando listas

Listas podem ser criadas com a função `list()` e a especificação do seu conteúdo é feita com a função `c()` que vismos desde a criação de vetores.

```{r}
vec <- c(1,2,3)
vec_char <- c("Estatística", "Matemática", "Economia", "Programação")
vec_logic <- c(TRUE, FALSE, TRUE, FALSE)
lista1 <- list(vec, vec_char, vec_logic)
lista1
```

Note o resultado acima. Os índices em colchetes duplos `[[]]` identificam o elemento ou a componente da lista. Os índices em colchete simples `[]` indicam qual sub-elemento da lista está sendo mostrado. A estrutura de uma lista pode se tornar complicada com o aumento do grau de sub-elementos. Mas essa flexibilidade, faz das listas uma ferramenta de armazenamento de dados para diversos propósitos.

Podemos visualizar a estrutura de uma lista com a função `str()`.

```{r}
str(lista1)
```

### Criando uma lista nomeada

```{r}
# Vetor
nomes <- c("Fortaleza", "Recife", "Salvador") 

# Matriz
distancias <- matrix(c(0, 760, 1180, 760, 0 , 807, 1180, 807, 0), ncol = 3)

# Data Frame
dados <- data.frame(cidade = c("Fortaleza", "Recife", "Salvador"),
                    pop = c(2.7, 1.66, 2.9),
                    idhm = c(0.754, 0.772, 0.759))

# Criar listas com os elementos acima
lista_cidades <- list(cidades = nomes, dist = distancias, df = dados)

# Imprimir lista
lista_cidades

```
